'use client'

import { useState } from 'react'
import { FiSearch, FiClock } from 'react-icons/fi'
import { toast } from 'react-hot-toast'
import { useRouter } from 'next/navigation'

export default function Home() {
  const [searchTerm, setSearchTerm] = useState('')
  const [result, setResult] = useState<string | null>(null)
  const [loading, setLoading] = useState(false)
  const [step, setStep] = useState<'idle' | 'gpt4o-mini' | 'gpt4o' | 'edit'>('idle')
  const router = useRouter()
  const [region, setRegion] = useState('')
  const [competitors, setCompetitors] = useState<string[]>([])
  const regions = [
    { value: '', label: 'Select Region' },
    { value: 'North America', label: 'North America' },
    { value: 'Europe', label: 'Europe' },
    { value: 'Asia-Pacific', label: 'Asia-Pacific' },
    { value: 'Latin America', label: 'Latin America' },
    { value: 'Middle East & Africa', label: 'Middle East & Africa' },
    { value: 'Global', label: 'Global' }
  ]

  const handleSearch = async () => {
    if (!searchTerm.trim() || !region) {
      toast.error('Please enter a brand name and select a region')
      return
    }
    setLoading(true)
    setStep('gpt4o-mini')
    setResult(null)
    try {
      // 1. 用 gpt-4o-mini-search-preview 生成报告
      const miniRes = await fetch('/api/openai', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          model: 'gpt-4o-mini-search-preview',
          max_tokens: 2000,
          messages: [
            {
              role: 'user',
              content: `I need you to do Deep Research on The Direct competitors of the brand: ${searchTerm} in the ${region} area. Firstly make sure that the brand you are researching is the brand I have specified. Secondly I want you to create a list of ${searchTerm}'s top competitors in the ${region} area. Thirdly I need you to verify that these are indeed the correct list of competitors for the brand mentioned. Make sure to be thorough in your verification and validation as the information needs to be accurate. Remember at the end of your output provide a numbered list of all direct competitors to ${searchTerm} in the ${region} area.`
            }
          ]
        })
      })
      const miniData = await miniRes.json()
      const report = miniData?.choices?.[0]?.message?.content || ''
      if (!report) throw new Error('gpt-4o-mini did not return content')

      // 2. 用 gpt-4o 总结，只输出竞品列表
      setStep('gpt4o')
      const summaryPrompt = `Below is a report generated by gpt-4o-mini-search-preview. It is deep research into the brand ${searchTerm} and its top direct competitors in the ${region} area. The list of Top Direct Competitors is at the bottom of the report. I need you to output a list consisting ONLY of the direct competitors from the report, EXCLUDING the brand itself (${searchTerm}). The output list should be simple and formatted as follows:

      Competitor 1, Competitor 2, Competitor 3, ... etc.

      Output the list and only the list, nothing else.

      Here is the report:
      ${report}`

      const gpt4oRes = await fetch('/api/openai', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          model: 'gpt-4o',
          max_tokens: 512,
          messages: [
            { role: 'user', content: summaryPrompt }
          ]
        })
      })
      const gpt4oData = await gpt4oRes.json()
      const competitorsText = gpt4oData?.choices?.[0]?.message?.content || ''
      setResult(competitorsText)
      // 进入编辑模式，初始化 competitors 数组，第一个元素是搜索关键词
      const competitorsList = competitorsText.split(',').map((c: string) => c.trim()).filter(Boolean)
      setCompetitors([searchTerm, ...competitorsList])
      setStep('edit')
    } catch (e: any) {
      setResult(e.message || 'Error occurred')
      setStep('idle')
    }
    setLoading(false)
  }

  // 编辑竞争对手输入框
  const handleCompetitorChange = (idx: number, value: string) => {
    if (idx === 0) return // Do not allow editing the first element (search keyword)
    setCompetitors(prev => {
      const arr = [...prev]
      arr[idx] = value
      return arr
    })
  }

  // 删除竞争对手
  const handleRemoveCompetitor = (idx: number) => {
    if (idx === 0) return // Do not allow deleting the first element (search keyword)
    setCompetitors(prev => {
      if (prev.length === 1) return ['']
      return prev.filter((_, i) => i !== idx)
    })
  }

  // 添加竞争对手
  const handleAddCompetitor = () => {
    setCompetitors(prev => [...prev, ''])
  }

  // 点击 Next，写入数据库
  const handleNext = async () => {
    const filtered = competitors.map(c => c.trim()).filter(Boolean) // Do not exclude the first element
    if (filtered.length <= 1) { // At least keyword and one competitor
      toast.error('Please enter at least one competitor')
      return
    }
    setLoading(true)
    try {
      const res = await fetch('/api/competitor-history', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          originalBrand: searchTerm,
          region,
          competitors: filtered // Send all data, including the first element
        })
      })
      const json = await res.json()
      const inserted = json.data
      if (!Array.isArray(inserted) || inserted.length === 0) {
        toast.error('Save failed')
        setLoading(false)
        return
      }
      const ids = inserted.map(i => i.id).join(',')
      router.push(`/competitor-result?ids=${ids}`)
    } catch (e) {
      toast.error('Save failed')
    }
    setLoading(false)
  }

  return (
    <main className="min-h-screen bg-gray-50 flex flex-col items-center justify-start relative p-0">
      {/* Search History Button */}
      <button
        className="absolute top-8 left-8 px-8 py-4 bg-blue-200 text-blue-900 font-bold text-lg rounded-lg shadow-lg hover:bg-blue-300 transition-all"
        onClick={() => window.location.href = '/history'}
        style={{ minWidth: 160 }}
      >
        Search History
      </button>

      {/* Title */}
      <h1 className="mt-24 mb-12 text-5xl font-light text-center text-gray-900 tracking-wide">
        Brand Competitor Analysis
      </h1>

      {/* Search Section */}
      <div className="flex w-full max-w-4xl items-start justify-center gap-8 mb-12">
        {/* Search Box */}
        <div className="flex-1">
          <input
            type="text"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            placeholder="Enter brand name..."
            className="w-full px-8 py-6 text-2xl border border-gray-300 rounded-3xl focus:outline-none focus:ring-2 focus:ring-blue-400 bg-blue-100 text-gray-900 shadow"
            disabled={loading || step !== 'idle'}
            style={{ minHeight: 72 }}
          />
        </div>
        {/* Region Dropdown */}
        <select
          value={region}
          onChange={e => setRegion(e.target.value)}
          className="px-8 py-6 text-2xl border border-gray-300 rounded-lg bg-blue-100 text-gray-900 shadow font-bold"
          disabled={loading || step !== 'idle'}
          style={{ minWidth: 220, minHeight: 72 }}
        >
          {regions.map(r => (
            <option key={r.value} value={r.value}>{r.label}</option>
          ))}
        </select>
        {/* Search Button */}
        <button
          onClick={handleSearch}
          className={`flex-shrink-0 px-8 py-6 bg-blue-200 text-blue-900 font-bold text-2xl rounded-lg shadow-lg ml-2 hover:bg-blue-300 transition-all flex items-center justify-center ${loading || !searchTerm.trim() || !region || step !== 'idle' ? 'opacity-50 cursor-not-allowed' : ''}`}
          disabled={loading || !searchTerm.trim() || !region || step !== 'idle'}
          style={{ minWidth: 160, minHeight: 72 }}
        >
          {loading && step !== 'edit' ? (
            <span className="animate-spin mr-2">⏳</span>
          ) : (
            'Search'
          )}
        </button>
      </div>

      {/* Result Section */}
      <div className="w-full max-w-4xl">
        {loading && step !== 'edit' && (
          <div className="text-center text-blue-500 font-semibold text-xl py-8">
            {step === 'gpt4o-mini' && 'Analyzing ...'}
            {step === 'gpt4o' && 'Summarizing ...'}
          </div>
        )}
        {/* 可编辑竞争对手列表 */}
        {step === 'edit' && (
          <div className="bg-blue-100 p-8 rounded-3xl shadow-lg text-black text-xl min-h-[120px] flex flex-col items-center">
            <div className="w-full flex flex-col gap-3 mb-4">
              {competitors.map((c, idx) => (
                <div key={idx} className="flex items-center gap-2">
                  <input
                    type="text"
                    value={c}
                    onChange={e => handleCompetitorChange(idx, e.target.value)}
                    className="border rounded px-3 py-2 flex-1"
                    placeholder={`Competitor ${idx + 1}`}
                  />
                  <button
                    type="button"
                    onClick={() => handleRemoveCompetitor(idx)}
                    className="text-red-500 text-xl px-2"
                    aria-label="Delete"
                  >×</button>
                </div>
              ))}
              <button
                type="button"
                onClick={handleAddCompetitor}
                className="text-blue-500 text-2xl px-2 mt-2"
                aria-label="Add"
              >＋</button>
            </div>
            <div className="mt-3 text-yellow-600 text-sm">
              You can change & add competitors. Please click "Next" to confirm, we will scrape competitors' information.
            </div>
            <button
              type="button"
              onClick={handleNext}
              className="mt-4 px-6 py-2 bg-blue-600 text-white rounded"
              disabled={loading}
            >
              Next
            </button>
          </div>
        )}
        {/* 原始只读结果（如果有） */}
        {result && step !== 'edit' && (
          <div className="bg-blue-100 p-8 rounded-3xl shadow-lg text-black text-xl min-h-[120px] flex items-center justify-center">
            <ol className="list-decimal pl-6 text-left inline-block">
              {result.split(',').map((item, idx) => (
                <li key={idx}>{item.trim()}</li>
              ))}
            </ol>
          </div>
        )}
      </div>
    </main>
  )
}
