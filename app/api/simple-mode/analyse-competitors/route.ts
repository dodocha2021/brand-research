import { NextRequest, NextResponse } from 'next/server'
import { supabase } from '@/lib/supabase'

// General GPT API call function
async function callGptApi(prompt: string, model: string): Promise<string> {
  const res = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      model,
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 1500
    })
  })
  const data = await res.json()
  return data.choices?.[0]?.message?.content?.trim() || ''
}

export async function POST(req: NextRequest) {
  try {
    const { brandName, searchId } = (await req.json()) as {
      brandName: string
      searchId: string
    }
    if (!brandName || !searchId) {
      return NextResponse.json(
        { error: 'brandName and searchId are required' },
        { status: 400 }
      )
    }

    // 1. Update status to analyzing
    const { error: updateError } = await supabase
      .from('searches')
      .update({ status: 'analyzing' })
      .eq('id', searchId)
    if (updateError) {
      console.error('Failed to update status to analyzing:', updateError)
    }

    // 2. Call GPT-4O-mini search preview to generate in-depth report
    const reportPrompt = `I need you to do Deep Research on the direct competitors of the brand: ${brandName} in North American area.`
    const report = await callGptApi(reportPrompt, 'gpt-4o-mini-search-preview')

    // 3. Extract top 5 competitor names from the report
    const summaryPrompt = `
Below is a report generated by gpt-4o-mini-search-preview for the brand "${brandName}".
Please list ONLY the top 4 direct competitors mentioned in that report, EXCLUDING the brand itself.
Return the competitor names separated by commas or new lines, with no additional text.
Report:
${report}`
    const rawList = await callGptApi(summaryPrompt, 'gpt-4o')

    // 4. Parse, deduplicate, and take top 4
    const items = rawList
      .split(/[\n,]+/)
      .map(item => item.replace(/^\d+[\).\s]*/, '').trim())
      .filter(item => item && item.toLowerCase() !== brandName.toLowerCase())
    const unique = Array.from(new Set(items))
    const top4 = unique.slice(0, 4)

    // 5. Final result array: brand itself + top 4
    const competitors = [brandName, ...top4]

    return NextResponse.json({ competitors })
  } catch (e: any) {
    console.error('analyse-competitors error:', e)
    // Mark status as failed when error occurs
    try {
      const { searchId } = (await req.json()) as { searchId: string }
      if (searchId) {
        await supabase
          .from('searches')
          .update({ status: 'failed' })
          .eq('id', searchId)
      }
    } catch (_) {
      // ignore
    }
    return NextResponse.json(
      { error: e.message || 'Internal error' },
      { status: 500 }
    )
  }
}